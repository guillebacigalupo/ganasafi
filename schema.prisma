datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

model Property {
  id                 Int @id @default(autoincrement())
  uuid               String  @default(cuid())
  object_id          Int
  object_type        String
  prop_group         String
  prop_key           String
  prop_value         String?
  prop_status        Int?

  @@unique([object_id, object_type, prop_group, prop_key], name: "object_property")
}

model Content {
  id                 Int @id @default(autoincrement())
  uuid               String  @default(cuid())
  language_id        Int @default(1)
  object_id          Int
  object_type        String
  title              String?
  description        String?
  seo_title          String?
  seo_description    String?
  createdAt DateTime @default(now())

  @@unique([language_id, object_id, object_type], name: "object_content")
}

model Product {
  id                 Int @id  @default(autoincrement())
  uuid               String  @default(cuid())
  title              String?
  description        String?
  slug               String @unique
  rate               Float?
  currencySymbol     String?
  currencyRate       Float?
  createdAt DateTime @default(now())
}

model Account {
  id                 Int @id @default(autoincrement())
  uuid               String @default(cuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int @id @default(autoincrement())
  uuid         String  @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model User {
  id            Int @id @default(autoincrement())
  uuid          String  @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}